# Configuration for Alacritty, the GPU enhanced terminal emulator.
#background_opacity: 1.00
background_opacity: 0.90

# Setup term for programs to be able to use it
env:
  TERM: xterm-256color

window:
  dynamic_title: true

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Startup Mode (changes require restart)
  #startup_mode: Windowed

  # Hide title bar
  decorations: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Turn off the mouse wheel scrollback
  multiplier: 0

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: brave-browser

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  unfocused_hollow: true

dpi:
   x: 166.0
   y: 166.0

font:
  normal:
    family: Fira Code
    style: Light

  bold:
    family: Fira Code
    style: Light

  italic:
    family: Fira Code
    style: Light

  size: 6

  offset:
    x: 0
    y: 0

  glyph_offset:
    x: 0
    y: 0

  use_thin_strokes: true

draw_bold_text_with_bright_colors: true

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Live config reload (changes require restart)
live_config_reload: true

# shell:
#   program: /usr/bin/bash
#   args:
#     - new-session
#     - -A
#     - -D
#     - -s
#     - main

colors:
  # Default colors
  primary:
    background: '#0d0d0d'
    foreground: '#EBEBEB'

  # Cursor colors
  cursor:
    text:   '#2c2c2c'
    cursor: '#d9d9d9'

  # Normal colors
  normal:
    black:   '#0d0d0d'
    red:     '#FF301B'
    green:   '#A0E521'
    yellow:  '#FFC620'
    blue:    '#1BA6FA'
    magenta: '#8763B8'
    cyan:    '#21DEEF'
    white:   '#EBEBEB'

  # Bright colors
  bright:
    black:   '#6D7070'
    red:     '#FF4352'
    green:   '#B8E466'
    yellow:  '#FFD750'
    blue:    '#1BA6FA'
    magenta: '#A578EA'
    cyan:    '#73FBF1'
    white:   '#FEFEF8'

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Up,       mods: Command, action: ScrollPageUp                 }
  - { key: Down,     mods: Command, action: ScrollPageDown               }
